<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.spring.project.admin.dao.AdminDAO">

	<!--중복확인  -->
	<select id="userNumChk" parameterType="String" resultType="int" >
		select count(*) from users where userNumber=#{userNumber}
	</select>

	<!-- 학생 가입처리 delStatus, authority 는 하드코딩 -->
	<insert id="insertUsers"
		parameterType="com.spring.project.admin.vo.AdStdVO">
		insert into users(userNumber, userPassword, userEngName,
						userName, userImage, userSsn,userCellNum,
						userEmail, delStatus, authority, gender, userZipCode, userAddr1, userAddr2 )
		values(#{userNumber},#{userSsn2},#{userEngName},#{userName},#{userImage},
				#{userSsn},#{userCellNum},#{userEmail},0,'ROLE_STUDENT', #{gender},
				#{userZipCode}, #{userAddr1}, #{userAddr2})
	</insert>

	<!-- 학생 가입처리 stdNumber는 userNumber = 학번 //학년은 한자리숫자 -->
	<insert id="insertStudent"
		parameterType="com.spring.project.admin.vo.AdStdVO">
		insert into student(stdNumber,grade, adDate, graDate, majorNum)
		values(#{userNumber},#{grade},#{adDate},#{graDate}, #{majorNum})
	</insert>

	<!-- 학생 가입처리 stdNumber는 userNumber = 학번 -->
	<insert id="insertStudentState"
		parameterType="com.spring.project.admin.vo.AdStdVO">
		insert into studentState(stdNumber, semester,
		graduation_state)
		values(#{userNumber},#{semester},0)
	</insert>

	<!-- 교수등록 -->
	<insert id="insertPUsers"
		parameterType="com.spring.project.admin.vo.AdProVO">
		insert into users(userNumber, userPassword, userEngName, userName, userImage, userSsn,userCellNum,
							userEmail, delStatus, authority, gender, userZipCode, userAddr1, userAddr2 )
					values(#{userNumber},#{userSsn2},#{userEngName},#{userName},#{userImage},
							#{userSsn},#{userCellNum},#{userEmail},0,'ROLE_PROFESSOR', #{gender},
							#{userZipCode}, #{userAddr1}, #{userAddr2})
	</insert>

	<!-- 교수등록 -->
	<insert id="insertEmployees"
		parameterType="com.spring.project.admin.vo.AdProVO">
		<choose>
			<when test="majorNum != 0">
			insert into employee(empNumber, majorNum,empHiredDate,annualLevel,bankName, accountNumber, accountHolder)
					values(#{userNumber},#{majorNum},#{empHiredDate},1,#{bankName},#{accountNumber},#{accountHolder})
			</when>
			<otherwise>
			insert into employee(empNumber,empHiredDate,annualLevel,bankName, accountNumber, accountHolder)
					values(#{userNumber},#{empHiredDate},1,#{bankName},#{accountNumber},#{accountHolder})
			</otherwise>
		</choose>
	</insert>

	<!-- 교수등록 -->
	<insert id="insertProcedure"
		parameterType="com.spring.project.admin.vo.AdProVO">
		BEGIN
		insertPaydetails(#{userNumber});
		END;
	</insert>
	<!-- 학생리스트 -->
	<select id="getStdList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.AdStdVO">
		select u.userNumber, u.userName, m.majorName, m.majorNum,
		u.authority,
		u.userCellNum , s.grade , st.graduation_state, f.faculty
		from student s,
		studentState st , users u, major m, faculty f
		where
		u.userNumber(+)=
		s.stdNumber
		and s.stdNumber = st.stdNumber(+)
		and
		s.majorNum(+) = m.majorNum
		and f.faculty = m.faculty(+)
		and u.authority
		= 'ROLE_STUDENT'
		and u.delstatus != 1
	</select>

	<!-- 교수리스트 -->
	<select id="getProList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.AdProVO">
		select u.userNumber, u.userName, m.majorName ,m.majorNum ,
				u.usercellnum, u.authority, e.annualLevel, e.empHiredDate, f.faculty
		from employee e , users u, major m, faculty f
		where u.userNumber= e.empnumber(+)
	   		 and e.majorNum = m.majorNum(+)
	   		 and f.faculty(+) = m.faculty
	   		 and u.authority = 'ROLE_PROFESSOR'
	   		 and u.delstatus != 1 

	</select>

	<!-- 학생상세 -->
	<select id="stdDetail"
		resultType="com.spring.project.admin.vo.AdStdVO">
		select u.userNumber,
		u.userZipCode, u.userAddr1,
		u.userAddr2, u.userName,
		u.userImage, u.userEngName,u.userSsn,
		u.gender, m.majorName, m.majorNum,
		st.semester,
		u.userEmail,
		u.userCellNum , s.grade ,s.graDate, st.graduation_state, f.faculty
		from student s, studentState st , users u, major m, faculty f
		where
		u.userNumber(+)= s.stdNumber
		and s.stdNumber = st.stdNumber(+)
		and
		s.majorNum(+) = m.majorNum
		and f.faculty = m.faculty
		and u.authority =
		'ROLE_STUDENT'
		and u.userNumber = #{userNumber}
		and u.delstatus != 1
	</select>

	<!-- 교수상세 -->
	<select id="proDetail"
		resultType="com.spring.project.admin.vo.AdProVO">
		select u.userNumber, u.userZipCode, u.userAddr1, u.userAddr2, u.userName, u.userImage,
				u.userEngName, u.userSsn, u.gender, m.majorName, m.majorNum, e.INTRODUCTION,
				u.userEmail, u.userCellNum, e.annualLevel, to_date(e.empHiredDate, 'yy/mm/dd') empHiredDate,
				 f.faculty, e.bankName, e.accountNumber, e.accountHolder
		from employee e, users u, major m, faculty f
		where 	u.userNumber= e.empNumber(+)
			and e.majorNum = m.majorNum(+)
			and f.faculty(+) = m.faculty
			and u.authority = 'ROLE_PROFESSOR'
			and u.userNumber = #{userNumber}
			and u.delstatus != 1
	</select>

	<!--학생 정보수정 -->
	<update id="updateUsers"
		parameterType="com.spring.project.admin.vo.AdStdVO">
		update users set userNumber = #{userNumber},
		userEngName=#{userEngName},
		userName=#{userName}, userSsn=#{userSsn},
		userCellNum=#{userCellNum},userEmail=#{userEmail}, gender=#{gender},
		userZipCode=#{userZipCode}, userAddr1=#{userAddr1},
		userAddr2=#{userAddr2}
		WHERE userNumber = #{userNumber}
	</update>

	<!--학생정보수정 -->
	<update id="updateStudent"
		parameterType="com.spring.project.admin.vo.AdStdVO">
		update student set stdNumber=#{userNumber},
		grade=#{grade},
		graDate=#{graDate}, majorNum=#{majorNum}
		WHERE stdNumber
		= #{userNumber}
	</update>

	<!--학생정보수정 -->
	<update id="updateStudentState"
		parameterType="com.spring.project.admin.vo.AdStdVO">
		update studentState set stdNumber=#{userNumber},
		semester=#{semester},
		graduation_state =#{graduation_state}
		WHERE
		stdNumber = #{userNumber}
	</update>

	<!--교수정보수정 -->
	<update id="updatePUsers"
		parameterType="com.spring.project.admin.vo.AdProVO">
		update users set userNumber = #{userNumber},
		userEngName=#{userEngName},
		userName=#{userName}, userSsn=#{userSsn},
		userCellNum=#{userCellNum}, userEmail=#{userEmail}, gender=#{gender},
		userZipCode=#{userZipCode}, userAddr1=#{userAddr1},
		userAddr2=#{userAddr2}
		WHERE userNumber = #{userNumber}
	</update>

	<!--교수정보수정 -->
	<update id="updateEmployees" parameterType="com.spring.project.admin.vo.AdProVO">
		<choose>
			<when test="majorNum !=0">
				update employee set empNumber= #{userNumber}, majorNum=#{majorNum},
						empHiredDate= #{empHiredDate}, accountHolder=#{accountHolder},
						annualLevel= #{annualLevel}, bankName= #{bankName}, accountNumber=#{accountNumber}
				WHERE empNumber= #{userNumber}
			</when>
			<otherwise>
				update employee set empNumber= #{userNumber},empHiredDate= #{empHiredDate}, 
						accountHolder= #{accountHolder}, annualLevel= #{annualLevel}, 
						bankName= #{bankName}, accountNumber=#{accountNumber}
				WHERE empNumber= #{userNumber}
			</otherwise>
		</choose>
>>>>>>> branch 'master' of https://github.com/KimJeongnam/Project_Garbage_Collector.git
	</update>

	<!--교수 프로필 이미지 변경 -->
	<update id="proImgUpdate"
		parameterType="com.spring.project.admin.vo.AdProVO">
		UPDATE users SET userImage=#{userImage} WHERE
		userNumber=#{userNumber}
	</update>

	<!-- 학생프로필 이미지 변경 -->
	<update id="stdImgUpdate"
		parameterType="com.spring.project.admin.vo.AdStdVO">
		UPDATE users SET userImage= #{userImage} WHERE
		userNumber= #{userNumber}
	</update>

	<!--학생 삭제 -->
	<update id="stdDelete" parameterType="String">
		update users set
		delStatus=1 WHERE userNumber = #{userNumber}
	</update>

	<!-- 단과대 + 학과 리스트 -->
	<select id="FandMList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.AdProVO">
		select distinct f.faculty from major m, faculty f where
		f.faculty = m.faculty
	</select>

	<!-- 휴복학 리스트 -->
	<select id="getSchoolLeave" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.AdStdVO">
		select sl.schoolLeaveStateCode, sl.kind, sl.leaveStart,
		sl.leaveEnd, u.userName, sl.leaveStatus
		from users u, schoolLeave sl
		where u.userNumber = sl.stdNumber
	</select>

	<!--전화번호 가져오기 -->
	<select id="getUserCellNumList" parameterType="java.util.Map"
		resultType="String">
		SELECT
		USERCELLNUM
		FROM USERS
		WHERE AUTHORITY = #{authority}
		AND DELSTATUS = 0
	</select>

	<!--교수 - 강의목록 -->
	<select id="proLectureList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.AdProVO">
		SELECT u.userName, e.empNumber, f.faculty, m.majorName,
		m.majorNum,
		l.lectureName, l.maximumCapacity,
		l.lectureClassfication,
		l.grade, l.grantedSemester, l.lectureScore, l.classRoom,
		(select
		count(*) from studentClassInfo where lecCode=l.leccode) as appliedStd
		FROM users u, employee e, faculty f, major m, lecture l
		WHERE
		u.userNumber = e.empNumber
		AND e.majorNum = m.majorNum
		AND m.faculty =
		f.faculty
		AND e.empNumber = l.empNumber
		AND e.empNumber =#{userNumber}
		AND l.delstatus = 0
		AND l.LECSTATUS != 3
	</select>

	<!--학생 - 강의목록 -->
	<select id="stdLectureList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.AdStdVO">
		SELECT u.username, l.lecCode, l.majorNum, l.lectureName,
		l.lectureClassfication, l.maximumCapacity, l.grade,
		l.grantedSemester,
		l.lectureScore, l.classRoom, sc.userNumber, u.userCellNum,
		(select
		count(*) from studentClassInfo where lecCode=l.lecCode) as appliedStd
		FROM studentClassInfo sc, lecture l, employee e, users u
		WHERE
		sc.lecCode = l.lecCode
		AND e.empNumber = l.empNumber
		AND u.userNumber =
		e.empNumber
		AND sc.userNumber = #{userNumber}
		AND sc.status = 1
		AND
		l.delstatus = 0
		AND l.LECSTATUS != 3
		GROUP BY u.username, l.lecCode,
		l.majorNum, l.lectureName,
		l.lectureClassfication,
		l.maximumCapacity,
		l.grade, l.grantedSemester, l.lectureScore, l.classRoom,
		sc.userNumber, u.userCellNum
	</select>



	<!-- 장학 단 -->
	<!-- 장학단 -->
	<!-- 장학글 갯수 -->

	<select id="Jang_getArticleCnt" resultType="int">

		SELECT COUNT(*) as cnt FROM SCHOLARSHIP where delstatus != 1
		<if test="year != 0">
			and to_char(year,'yyyy') like #{year}
			<if test="smester != 0">
				and semester like #{smester}
			</if>
		</if>

	</select>

	<!-- 장학글 목록 -->

	<select id="jang_getArticleList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.ScholarpkVO">

		SELECT *
		FROM (select SCHOLARPK,SCHOLARNAME,to_char(YEAR,'YYYY') as
		YEAR,SEMESTER,TO_CHAR(AMOUNT,'$999,999,999,999,999') as AMOUNT,ROWNUM
		rNum
		from (
		select * FROM SCHOLARSHIP
		where delstatus = 0
		order by
		SCHOLARPK desc
		)
		<where>
			<if test="year != 0">
				and to_char(year,'yyyy') = #{year}
				<if test="smester != 0">
					and semester like #{smester}
				</if>
			</if>

		</where>
		) 
				               <![CDATA[where rNum >= #{start} and rNum <= #{end}]]>

	</select>

	<!-- 장학심사 글 갯수 -->

	<select id="audit_getArticleCnt" resultType="int">

		select count(*) from
		Evaluation

	</select>

	<!-- 장학글 추가 -->

	<insert id="insertjangjag"
		parameterType="com.spring.project.admin.vo.ScholarpkVO">

		INSERT INTO
		SCHOLARSHIP(SCHOLARPK,SCHOLARNAME,YEAR,SEMESTER,AMOUNT,SCHOLARCONTENT,DELSTATUS)
		values(SCHOLARSHIP_SEQ.nextval,#{scholarname},#{year},#{semester},#{amount},#{scholarcontent},0)

	</insert>

	<!-- 장학글 상세 -->
	<select id="content_getArticle"
		resultType="com.spring.project.admin.vo.ScholarpkVO">

		SELECT * FROM SCHOLARSHIP where scholarpk = #{scholarpk}

	</select>

	<!-- 장학글 삭제 -->
	<update id="jang_delete">

		UPDATE SCHOLARSHIP
		SET delstatus = 1
		WHERE scholarpk in
		<foreach item="scholarpk" collection="array" open="("
			separator="," close=")">
			#{scholarpk}
		</foreach>

	</update>

	<!-- 장학금 글 심사 -->
	<select id="auditCnt"
		resultType="com.spring.project.admin.vo.auditVO">

		<![CDATA[select * from Evaluation where TO_DATE(sysdate) - TO_DATE(year) <= 1095]]>

	</select>

	<!-- 장학금 글 심사 -->
	<select id="auditCnt2"
		resultType="com.spring.project.admin.vo.auditVO">

		<![CDATA[select * from Evaluation where statCode = #{auditct} and TO_DATE(sysdate) - TO_DATE(year) <= 1095]]>

	</select>




	<!-- 장학금 심사 합격완료 -->
	<update id="auditupdate">

		UPDATE scholarshipInfo
		SET statCode = 1
		WHERE schInfoPk in
		<foreach item="schInfoPk" collection="array" open="("
			separator="," close=")">
			#{schInfoPk}
		</foreach>

	</update>

	<!-- 장학금 심사 불완료 -->
	<update id="auditupdate2">

		UPDATE scholarshipInfo
		SET statCode = 0
		WHERE schInfoPk in
		<foreach item="schInfoPk" collection="array" open="("
			separator="," close=")">
			#{schInfoPk}
		</foreach>

	</update>

	<!-- 장학금 심사 완료 -->
	<select id="auditupdate3" resultType="int">

		select count(*)
		from scholarshipinfo
		WHERE schInfoPk in

		<foreach item="schInfoPk" collection="array" open="("
			separator="," close=")">
			#{schInfoPk}
		</foreach>

	</select>

	<!-- 장학금 심사 완료 -->
	<!-- <update id="auditupdate3"> UPDATE scholarship SET delstatus = 2 WHERE 
		schInfoPk in <foreach item="schInfoPk" collection="array" open="(" separator="," 
		close=")"> #{schInfoPk} </foreach> </update> -->

	<!-- ==========================================교직 업무 관리 START========================================= -->
	<resultMap type="com.spring.project.student.vo.LectureVO"
		id="lectureMap">
		<id property="lecCode" column="leccode" />
		<collection property="lectureTimes" column="leccode"
			select="getLectureTime"></collection>
	</resultMap>

	<select id="getLectureTime"
		resultType="com.spring.project.admin.vo.LectureTime">
		SELECT lt.lecturetimecode
		, tt.timetblcode
		,
		tt.beginninglecturetime
		, tt.endlecturetime
		,
		tt.classTime
		, tt.lectureday
		FROM lecturetime lt JOIN timetable tt
		ON lt.timetblcode =
		tt.timetblcode
		WHERE
		lt.lecCode = #{leccode}
		ORDER BY tt.timetblcode
	</select>

	<!-- 교직 업무 관리 -->
	<select id="majorListCount" parameterType="java.util.Map"
		resultType="int">
		SELECT COUNT(*)
		FROM (
		SELECT ROWNUM rnum, r.*
            FROM(
            SELECT majorNum, faculty, majorName, maxnum
            FROM major
           <where>
					<![CDATA[ delStatus <> 1 ]]>
					<choose>
						<when test="keyword != null">
							AND majorName like '%'|| #{keyword} ||'%'
						</when>
						<when test="keyword != null and college!=null">
							AND majorName like '%'|| #{keyword} ||'%' AND
							faculty = #{college}
						</when>
						<when test="keyword==null and college!=null">
							AND faculty = #{college}
						</when>
					</choose>
				</where>
				ORDER BY majorNum DESC
            ) r
		)
	</select>

	<select id="majorList" parameterType="java.util.Map"
		resultType="com.spring.project.share.vo.Major">
		SELECT *
		FROM (
		SELECT ROWNUM rnum, r.*
            FROM(
            SELECT majorNum, faculty, majorName, maxnum
            FROM major
            <where>
					<![CDATA[ delStatus <> 1 ]]>
					<choose>
						<when test="keyword != null">
							AND majorName like '%'|| #{keyword} ||'%'
						</when>
						<when test="keyword != null and college!=null">
							AND majorName like '%'|| #{keyword} ||'%' AND
							faculty = #{college}
						</when>
						<when test="keyword==null and college!=null">
							AND faculty = #{college}
						</when>
					</choose>
				</where>
				ORDER BY majorNum DESC
            ) r
           )
        <![CDATA[
		    WHERE rnum >= #{start} AND rnum <= #{end}
		    ]]>
	</select>

	<select id="deleteMajor" statementType="CALLABLE"
		parameterType="com.spring.project.student.vo.LectureVO">
		{ call update_major_delstatus_proc(#{majorNum}, 1,
		#{result, mode=OUT, javaType=int, jdbcType=NUMERIC}) }
	</select>

	<insert id="addMajor"
		parameterType="com.spring.project.share.vo.Major">
		INSERT INTO major
		values(SEQ_MAJOR_MAJORNUM.nextval,
		#{faculty}, #{majorName}, #{maxNum}, 0)
	</insert>

	<update id="modifyMajor"
		parameterType="com.spring.project.share.vo.Major">
		UPDATE major
		<set>
			<if test="faculty != null"> faculty = #{faculty}</if>
			<if test="majorName != null">, majorName = #{majorName}</if>
			<if test="maxNum != null">, maxNum = #{maxNum}</if>
			<if test="delStatus != null">, delStatus = #{delStatus}</if>
		</set>
		WHERE majorNum = #{majorNum}
	</update>

	<!-- =====강의 관리==== -->
	<select id="emptyLecTime" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.LectureTime">
		select *
		FROM timetable
		WHERE timetblCode NOT IN(
		SELECT
		lt.timetblCode
		FROM lectureTime lt JOIN lecture l
		ON lt.leccode =
		l.leccode
		WHERE l.empNumber = #{empNumber}
		AND l.grantedsemester =
		#{semester}
		)
		ORDER BY timetblCode
	</select>

	<select id="getLecturesTimes" parameterType="java.util.Map"
		resultType="com.spring.project.student.vo.LectureVO">
		SELECT l.lecCode
		, l.lectureName
		, l.empNumber
		, l.grantedSemester
		,
		tt.timetblcode
		, tt.beginninglecturetime
		, tt.endlecturetime
		,
		tt.classTime
		, tt.lectureday
		FROM lecture l JOIN employee emp
		ON
		l.empNumber = emp.empnumber
		JOIN lectureTime lt
		ON l.leccode =
		lt.leccode
		JOIN timetable tt
		ON lt.timetblcode = tt.timetblcode
		<where>
			<if test="empNumber !=null">
				l.empNumber = #{empNumber}
			</if>
			<if test="semester != null">
				AND l.grantedsemester = #{semester}
			</if>
			<if test="lecCode != null">
				AND l.lecCode = #{lecCode}
			</if>
		</where>
		ORDER BY tt.timetblcode
	</select>

	<select id="getLectureSeqNextval" resultType="int">
		SELECT last_number
		FROM USER_SEQUENCES
		WHERE sequence_name = 'LECTURE_SEQ'
	</select>

	<select id="getLectureCount" resultType="int">
		SELECT COUNT(*)
		FROM(
		SELECT ROWNUM rnum
		, l.lecCode , l.majorNum,
		m.majorName, l.lectureName, u.userNumber,
		u.userImage
		, u.userName,
		l.lectureClassfication, l.grade, l.grantedSemester,
		l.maximumCapacity,
		l.lecStatus, l.lectureScore
		FROM lecture l JOIN major m
		ON l.majorNum =
		m.majorNum
		JOIN employee emp
		ON l.empNumber = emp.empNumber
		JOIN users u
		ON emp.empNumber = u.userNumber
		<where>
	            	<![CDATA[ 
	            	l.delStatus <> 1 
	            	]]>
			<if test="division != null">
				AND l.lectureClassfication = #{division}
			</if>
			<if test="faculty != null">
				AND m.faculty = #{faculty}
			</if>
			<if test="major != null">
				AND l.majorNum = #{major}
			</if>
			<if test="keyword != null">
				AND m.majorName like '%'||#{keyword}||'%'
			</if>
		</where>
		)
	</select>

	<select id="getLectureList"
		resultType="com.spring.project.student.vo.LectureVO">
		SELECT *
		FROM(
		SELECT ROWNUM rnum
		, l.lecCode , l.majorNum, m.majorName,
		l.lectureName, u.userNumber,
		u.userImage
		, u.userName,
		l.lectureClassfication, l.grade, l.grantedSemester,
		l.maximumCapacity,
		l.lecStatus, l.lectureScore
		FROM lecture l JOIN major m
		ON l.majorNum =
		m.majorNum
		JOIN employee emp
		ON l.empNumber = emp.empNumber
		JOIN users u
		ON emp.empNumber = u.userNumber
		<where>
	            	<![CDATA[ 
	            	l.delStatus <> 1 
	            	]]>
			<if test="division != null">
				AND l.lectureClassfication = #{division}
			</if>
			<if test="faculty != null">
				AND m.faculty = #{faculty}
			</if>
			<if test="major != null">
				AND l.majorNum = #{major}
			</if>
			<if test="keyword != null">
				AND m.majorName like '%'||#{keyword}||'%'
			</if>
		</where>
		)
	    <![CDATA[ WHERE rnum >= #{start} AND rnum <= #{end} 
	    ORDER BY userName, majorNum, lectureClassfication DESC ]]>
	</select>

	<select id="getProfessorCount" parameterType="java.util.Map"
		resultType="int">
		SELECT COUNT(*) FROM(
		SELECT ROWNUM rnum
		, u.userNumber, u.userImage,
		m.faculty, m.majorNum, m.majorName, u.userName
		FROM users u JOIN
		employee emp
		ON
		u.userNumber = emp.empNumber
		JOIN major m
		ON emp.majornum
		= m.majornum
		<where>
			u.delstatus != 1
			<if test="faculty != null">
				AND m.faculty = #{faculty}
			</if>
			<if test="majorNum != null">
				AND m.majorNum = #{majorNum}
			</if>
			<if test="keyword != null">
				AND (u.userName like '%'||#{keyword}||'%'
				OR u.userNumber
				like '%'||#{keyword}||'%')
			</if>
		</where>
		ORDER BY u.userNumber
		)
	</select>

	<select id="getProfessorList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.AdProVO">
		SELECT * FROM(
		SELECT ROWNUM rnum
		, u.userNumber, u.userImage,
		m.faculty, m.majorNum, m.majorName, u.userName
		FROM users u JOIN
		employee emp
		ON
		u.userNumber = emp.empNumber
		JOIN major m
		ON emp.majornum
		= m.majornum
		<where>
			u.delstatus != 1
			<if test="faculty != null">
				AND m.faculty = #{faculty}
			</if>
			<if test="majorNum != null">
				AND m.majorNum = #{majorNum}
			</if>
			<if test="keyword != null">
				AND (u.userName like '%'||#{keyword}||'%'
				OR u.userNumber
				like '%'||#{keyword}||'%')
			</if>
		</where>
		ORDER BY u.userNumber
		)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>

	<select id="addLecture" statementType="CALLABLE"
		parameterType="com.spring.project.student.vo.LectureVO">
		{call add_lecture_proc(#{majorNum}, #{userNumber},
		#{lectureName}
		, #{lectureClassfication}, #{maximumCapacity}, #{grade},
		#{grantedSemester}, #{lectureScore}, #{classRoom}
		,
		TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')), #{ttc, mode=IN,
		typeHandler=com.spring.project.admin.vo.LectureTimetblCodesHandler},
		#{result, mode=OUT, javaType=int, jdbcType=NUMERIC})}
	</select>

	<select id="getLecture" resultMap="lectureMap">
		SELECT l.lecCode , l.majorNum,
		m.majorName,
		u.userNumber, u.userImage, u.userName
		, l.lectureName,
		l.classRoom, l.lecStatus
		, l.lectureClassfication,
		l.grade,
		l.grantedSemester
		, l.maximumCapacity , l.lecStatus, l.lectureScore
		FROM lecture l JOIN
		major m
		ON l.majorNum =
		m.majorNum
		JOIN employee emp
		ON l.empNumber =
		emp.empNumber
		JOIN users u
		ON emp.empNumber =
		u.userNumber
		WHERE
		l.leccode = #{lecCode}
	</select>

	<select id="modifyLecture" statementType="CALLABLE"
		parameterType="com.spring.project.student.vo.LectureVO">
		{call modify_lecture_proc(#{lecCode}, #{majorNum},
		#{userNumber}, #{lectureName}
		, #{lectureClassfication},
		#{maximumCapacity}, #{grade}, #{grantedSemester}, #{lectureScore},
		#{classRoom}
		, TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')), #{ttc, mode=IN,
		typeHandler=com.spring.project.admin.vo.LectureTimetblCodesHandler},
		#{result, mode=OUT, javaType=int, jdbcType=NUMERIC})}
	</select>

	<update id="deleteLecture" parameterType="java.util.Map">
		UPDATE lecture
		SET
		delstatus = 1
		WHERE leccode = #{lecCode}
	</update>
	<!-- ==========================================교직 업무 관리 END========================================= -->

	<!-- ==========================================회계관리 START========================================= -->
	
	<!-- 학사 상태 조회 -->
	<select id="getBachelorStatus" resultType="int">
	select * FROM bachelor_status
	</select>
	
	<!-- 급여계산/대장 -->
	<select id="payrollList"
		resultType="com.spring.project.admin.vo.payrollVO">
		select to_char(imputedYear,'yyyy/mm') imputedYear,
		paymentClassfication, registerName, paymentDate,
		to_char(paymentYear,'yyyy/mm') paymentYear,
		(select
		NVL(SUM(cashamount),0) + NVL(SUM(confirmedpayment),0) as totalamount
		from registerDetail r, payment p where r.paymentCode = p.paymentCode
		and paylistNum =
		p.paylistNum) totalAmount,
		status
		from paymentlist p
		order by imputedYear desc
	</select>

	<select id="getFacultyList"
		resultType="com.spring.project.admin.vo.payrollVO">
		SELECT empNumber, userName, majorName,sum(overtime)
		overtime,sum(기본급) basicPay, sum(extraPay) extraPay,
		sum(식대)
		foodExpenses,sum(차량유지비) vehicleCost,
		sum(기본급)+sum(extraPay)+sum(식대)+sum(차량유지비) personnelTotalPay
		from(SELECT e.empNumber, u.userName, m.majorName,r.overtime,
		CASE WHEN
		i.incentiveName = '기본급' THEN p.cashAmount ELSE 0 END "기본급",
		CASE WHEN
		i.incentiveName = '식대' THEN p.cashAmount ELSE 0 END "식대",
		CASE WHEN
		i.incentiveName = '차량유지비' THEN p.cashAmount ELSE 0 END "차량유지비",
		(select ConfirmedPayment from registerDetail re, payment pa where
		re.paymentCode=pa.paymentCode and re.regdecode=r.regdecode) as
		extraPay
		FROM users u,employee e, major m, payment p, incentiveMenu i,
		registerDetail r
		where u.userNumber = e.empNumber and e.majorNum =
		m.majorNum and p.empNumber=e.empNumber
		and
		p.incentiveCode=i.incentiveCode and r.paymentCode=p.paymentCode)
		group
		by empNumber, userName, majorName
	</select>

	<select id="getPaymentClassfication"
		resultType="com.spring.project.admin.vo.payrollVO">
		select paylistNum,to_char(imputedYear,'yyyy/mm')
		imputedYear, paymentClassfication
		from paymentlist order by imputedYear
		desc
	</select>

	<select id="getFinalPayrollList"
		resultType="com.spring.project.admin.vo.payrollVO">
		select to_char(imputedYear,'yyyy/mm'), paymentClassfication
		from
		paymentlist
	</select>

	<select id="lookupWorkRecord" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.payrollVO">
		select * from where imputedYear=#{imputedYear}
	</select>

	<select id="getFacultyMajor"
		resultType="com.spring.project.admin.vo.payrollVO">
		select m.majorName from employee e, major m where
		e.majorNum=m.majorNum
	</select>

	<select id="accountFacultyList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.payrollVO">
		select * from employee
	</select>

	<insert id="insertPayroll" parameterType="java.util.Map">
		insert into paymentlist
		values(PAYMENTLIST_SEQ.nextval,
		to_date(#{imputedYear},'yyyy/mm'),#{paymentClassfication},
		#{beginningPeriod},#{endPeriod},#{paymentDate},
		to_date(#{paymentYear},'yyyy/mm'),#{registerName},0,0)
	</insert>

	<update id="ConfirmationWorkRecord"
		parameterType="java.util.List">
		<foreach item="map" collection="list" separator=";"
			open="DECLARE BEGIN" close=";END;">
			UPDATE registerDetail
			SET overtime =
			#{map.overtime}
			WHERE regDeCode=
			(select regDeCode from registerDetail
			r, payment p where
			r.paymentCode=p.paymentCode and r.paylistNum =
			(SELECT paylistNum from paymentList
			where imputedYear =
			to_date(#{map.imputedYear},'yyyy/mm'))
			and
			p.empNumber=#{map.empNumber} and p.incentivecode = 3)
		</foreach>
	</update>

	<update id="updateOverPay" parameterType="java.util.List">
		<foreach item="map" collection="list" separator=";"
			open="BEGIN" close=";END;">
			updateOverPay(#{map.empNumber}, #{map.overtime},
			#{map.imputedYear})
		</foreach>
	</update>

	<update id="SaveEnterAmountManually"
		parameterType="java.util.List">
		<foreach item="map" collection="list" separator=";"
			open="BEGIN" close=";END;">
			SaveEnterAmountManually(#{map.basicPay},#{map.extraPay},#{map.foodExpenses},
			#{map.vehicleCost},#{map.empNumber}, #{map.imputedYear})
		</foreach>
	</update>

	<select id="ConfirmOvertime" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.payrollVO">
		SELECT empNumber, userName, NVL(majorName,'교직원')
		majorName,imputedYear,sum(overtime) overtime
		,sum(기본급) basicPay,
		sum(추가근무수당) extraPay, sum(식대)
		foodExpenses,sum(차량유지비) vehicleCost,
		sum(기본급)+sum(추가근무수당)+sum(식대)+sum(차량유지비) personnelTotalPay
		from(
		SELECT e.empNumber, u.userName, m.majorName,r.overtime,
		to_char(pa.imputedYear,'yyyy/mm') as imputedYear,
		case when
		p.incentiveCode=2 then r.confirmedPayment ELSE 0 END "기본급",
		case when p.incentiveCode=3 then r.confirmedPayment ELSE 0 END "추가근무수당",
		case when p.incentiveCode=4 then r.confirmedPayment ELSE 0 END "식대",
		case when p.incentiveCode=5 then r.confirmedPayment ELSE 0 END "차량유지비"
		FROM users u,employee e, major m, payment p, incentiveMenu i,
		registerDetail r, paymentList pa
		where u.userNumber = e.empNumber and
		e.majorNum = m.majorNum(+) and p.empNumber=e.empNumber
		and
		p.incentiveCode=i.incentiveCode and r.paymentCode=p.paymentCode and
		pa.paylistNum=r.paylistNum)
		group by empNumber, userName, majorName,
		imputedYear
		having
		imputedYear=#{imputedYear}
	</select>

	<select id="getEmpNumber"
		resultType="com.spring.project.admin.vo.payrollVO">
		select empNumber from employee
	</select>

	<select id="getCopyPayrollFrom" parameterType="java.util.Map"
		resultType="int">
		select count(*) from registerDetail where paylistNum =
		#{copyPayrollFrom}
	</select>

	<insert id="CopyPayroll" parameterType="java.util.Map">
		call
		copypaydetails(#{copyPayrollFrom},#{copyPayrollTo},#{payrollCnt})
	</insert>

	<update id="ConfirmPayroll" parameterType="java.util.Map">
		UPDATE paymentList set
		status = 1 where imputedYear = to_date(#{imputedYear},'yyyy/mm')
		and
		paymentClassfication = #{paymentClassfication}
	</update>

	<delete id="DeletePayroll" parameterType="java.util.Map">
		delete from paymentList
		where imputedYear = to_date(#{imputedYear},'yyyy/mm')
		and
		paymentClassfication = #{paymentClassfication}
	</delete>

	<delete id="DeleteRegisterDetail" parameterType="java.util.Map">
		delete from
		registerDetail where paylistNum = (select paylistNum from paymentList
		where imputedYear = to_date(#{imputedYear},'yyyy/mm') and
		paymentClassfication = #{paymentClassfication})
	</delete>
	
	<select id="getPaymentListPk" resultType="int">
	SELECT PAYLISTNUM FROM paymentlist WHERE TO_CHAR(IMPUTEDYEAR, 'YYYY/MM') = #{date}
	</select>
	
	<insert id="insertPayrollwith0" parameterType="java.util.List">
		<foreach item="map" collection="list" separator=";"
			open="BEGIN" close=";END;">
			insertPayrollwith0(#{map.paymentListNum}, #{map.empNumber})
		</foreach>
	</insert>
	
	<update id="insertPayrollwith1" parameterType="java.util.Map">
		update registerDetail set paylistNum = #{imputedYear} where paylistNum = 0
	</update>
	
	<!-- ==========================================회계관리 END========================================= -->






	<!-- ==========================================학사일정 START========================================= -->
	
	<!-- 학사일정관리 진입 -->
	<select id="lecM" parameterType="String" resultType="com.spring.project.admin.vo.lecMVO">
 		SELECT*FROM lectureselectperiod order by year desc
 	</select>
 	
 	<!-- 학사일정 삭제 -->
	<delete id="delete_sc" parameterType="String">
 		delete from lectureselectperiod where year = #{year} and semester = #{semester}
 	</delete>
 	
 	<!-- 학사일정 수정 -->
 	<update id="lecScUpdate" parameterType="com.spring.project.admin.vo.lecMVO">
 		UPDATE lectureselectperiod SET 
		startSelectLecture = to_date(#{startSelectLecture}||' 09:00','YYYY-MM-DD HH24:MI'), 
		endSelectLecture = to_date(#{endSelectLecture}||' 22:00','YYYY-MM-DD HH24:MI'), 
		openingDay = to_date(#{openingDay}||' 09:00','YYYY-MM-DD HH24:MI'), 
		gradeOpeningDay = to_date(#{gradeOpeningDay}||' 09:00','YYYY-MM-DD HH24:MI'), 
		endingDay = to_date(#{endingDay}||' 22:00','YYYY-MM-DD HH24:MI')
		WHERE year = #{year} 
		AND semester = #{semester}
 	</update>
 	
 	<!-- 학사일정 추가 -->
 	<insert id="lecScInsert" parameterType="com.spring.project.admin.vo.lecMVO">
		INSERT INTO lectureselectperiod(year, semester, startSelectLecture, endSelectLecture, openingDay, gradeOpeningDay, endingDay)VALUES(
		#{year},
		#{semester},
		to_date(#{startSelectLecture}||' 09:00','YYYY-MM-DD HH24:MI'),
		to_date(#{endSelectLecture}||' 22:00','YYYY-MM-DD HH24:MI'),
		to_date(#{openingDay}||' 09:00','YYYY-MM-DD HH24:MI'),
		to_date(#{gradeOpeningDay}||' 09:00','YYYY-MM-DD HH24:MI'),
		to_date(#{endingDay}||' 22:00','YYYY-MM-DD HH24:MI')
		)
 	</insert>
 	<!-- ==========================================학사일정 END============================================ -->



	
	
	<!-- ==========================================성적업무통계 START============================================ -->
	
	<!-- 성적업무통계 단과 -->
	<select id="facultyAvg" parameterType="String" resultType="com.spring.project.admin.vo.ChartVO">
 		SELECT*FROM facultyAvg
 	</select>
	
	<!-- 성적업무통계 학과 -->
	<select id="majorAvg" parameterType="String" resultType="com.spring.project.admin.vo.ChartVO">
 		SELECT*FROM majorAvg
 	</select>
	
	<!-- 성적업무통계 남녀 -->
	<select id="genderAvg" parameterType="String" resultType="com.spring.project.admin.vo.ChartVO">
 		SELECT*FROM genderAvg
 	</select>
	
	<!-- 성적업무통계 학년 -->
	<select id="gradeAvg" parameterType="String" resultType="com.spring.project.admin.vo.ChartVO">
 		SELECT*FROM gradeAvg
 	</select>
	
	
	<!-- ==========================================성적업무통계 END============================================== -->

</mapper>