<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.spring.project.student.dao.StudentDAO">
	<!-- 수강신청 목록 갯수 구하기 -->
	<select id="getLectureCnt" parameterType="java.util.Map"
		resultType="int">
		select count(*) from
		(SELECT rownum rNum, accountHolder, lecCode,
		majorName, lectureName, lectureClassfication, maximumcapacity, grade
		,
		grantedSemester, lectureScore, classRoom, classTime
		from
		(SELECT
		u.userName as accountHolder, l.lecCode,m.majorName,l.lectureName,
		l.lectureClassfication, (l.maximumcapacity-(select count(*) from
		studentClassInfo where lecCode=l.lecCode))
		as maximumcapacity, l.grade,
		l.grantedSemester, l.lectureScore,
		l.classRoom,
		LISTAGG(to_char(t.lectureDay)||t.classTime, ',')within
		group(order by
		t.classTime) as classTime
		FROM employee e , lecture l,
		lectureTime lt,
		timetable t, major m, users u
		<where>
			e.empNumber = l.empNumber and l.lecCode = lt.lecCode and
			lt.timetblCode = t.timetblCode and m.majorNum=l.majorNum
			and u.userNumber = e.empNumber and
			l.delStatus = 0 and l.grantedSemester = #{grantedSemester}
			<if test="keyword != null">
				AND LOWER(l.lectureName) like '%'||LOWER(#{keyword})||'%'
			</if>
			<if test="major != null">
				AND m.majorName like '%'||#{major}||'%'
			</if>
			<if test="classification != null">
				AND l.lectureClassfication like
				'%'||#{classification}||'%'
			</if>
			<if test="grade != null">
				AND l.grade like '%'||#{grade}||'%'
			</if>
		</where>
		GROUP BY u.userName, l.lecCode,m.majorName,l.lectureName,
		l.lectureClassfication, maximumcapacity,l.grade,
		l.grantedSemester,
		l.lectureScore, l.classRoom
		)
		)
	</select>

	<!-- 수강신청 목록 조회 -->
	<select id="lectureList" parameterType="java.util.Map"
		resultType="com.spring.project.student.vo.LectureVO">

		select * from
		(SELECT rownum rNum, accountHolder, lecCode, majorName,
		lectureName, lectureClassfication, maximumcapacity, grade
		,
		grantedSemester, lectureScore, classRoom, classTime
		from
		(SELECT
		u.userName as accountHolder, l.lecCode,m.majorName,l.lectureName,
		l.lectureClassfication, (l.maximumcapacity-(select count(*) from
		studentClassInfo where lecCode=l.lecCode)) as maximumcapacity,l.grade,
		l.grantedSemester, l.lectureScore, l.classRoom,
		LISTAGG(to_char(t.lectureDay)||t.classTime, ',')within group(order by
		t.classTime) as classTime
		FROM employee e , lecture l, lectureTime lt,
		timetable t, major m, users u
		<where>
			e.empNumber = l.empNumber and l.lecCode = lt.lecCode and
			lt.timetblCode = t.timetblCode and m.majorNum=l.majorNum
			and u.userNumber = e.empNumber and
			l.delStatus = 0 and l.grantedSemester = #{grantedSemester}
			<if test="keyword != null">
				AND LOWER(l.lectureName) like '%'||LOWER(#{keyword})||'%'
			</if>
			<if test="major != null">
				AND m.majorName like '%'||#{major}||'%'
			</if>
			<if test="classification != null">
				AND l.lectureClassfication like
				'%'||#{classification}||'%'
			</if>
			<if test="grade != null">
				AND l.grade like '%'||#{grade}||'%'
			</if>
		</where>
		GROUP BY u.userName, l.lecCode,m.majorName,l.lectureName,
		l.lectureClassfication, maximumcapacity,l.grade,
		l.grantedSemester,
		l.lectureScore, l.classRoom
		)
		)
		<where>
			<![CDATA[
			rNum >= #{start} and rNum <= #{end}
			]]>
		</where>
	</select>

	<!-- 시간표 조회 -->
	<select id="schoolTimeTable" parameterType="String"
		resultType="com.spring.project.student.vo.LectureVO">
		SELECT dense_rank()over(order by lecCode) as rank , r.*
		from (select * from timetableview where userNumber =#{userNumber}) r
	</select>

	<!-- 시간표 Hover -->
	<select id="lectureHover" parameterType="java.util.Map"
		resultType="com.spring.project.student.vo.LectureVO">
		select * from lectureHover where userNumber = #{userNumber}
		and lecCode = #{lecCode}
	</select>

	<!-- 강의 체크 -->
	<select id="checkLecture" parameterType="java.util.Map"
		resultType="int">
		select count(*) from
		(SELECT timetblcode
		from timetableview
		where
		userNumber=#{userNumber})
		where timetblCode in (select timetblCode from lectureTime where
		leccode=#{lecCode})
	</select>
	<!-- 강의 인원수 체크 -->
	<select id="checkStudentInLecture" parameterType="String"
		resultType="int">
		select count(*) from studentClassInfo where
		lecCode=#{lecCode}
	</select>


	<!-- 강의 인원수 체크 -->
	<select id="checkStudentInLecture2"
		parameterType="java.util.Map" resultType="int">
		<![CDATA[
		select count(*) from lecture where maximumCapacity>=#{selectCnt} and lecCode=#{lecCode}
		]]>
	</select>

	<!-- 듣고자 하는 강의 학점 합 -->
	<select id="getLectureScoreSum" parameterType="java.util.Map"
		resultType="int">
		SELECT NVL((select sum(lecturescore) from studentClassInfo s,
		lecture l where s. lecCode=l.lecCode group by userNumber
		having
		userNumber=#{userNumber}), 0)+(SELECT lecturescore from lecture where
		leccode = #{lecCode}) as lecturescoreSum from dual
	</select>

	<!-- 강의 신청 -->
	<insert id="applyLecture" parameterType="java.util.Map">
		insert into
		studentClassInfo(infoCode, lecCode, userNumber, status)
		values(STUDENTCLASSINFO_SEQ.nextval,#{lecCode},#{userNumber},1)
	</insert>

	<!-- 프로필 이미지 변경 -->
	<update id="s_imageUpload"
		parameterType="com.spring.project.professor.vo.MyPageVO">
		UPDATE users SET userImage=#{userImage} WHERE userNumber=#{userNumber}
	</update>

	<!-- 개인정보 -->
	<select id="personalProfile" parameterType="String"
		resultType="com.spring.project.student.vo.S_informationVO">
		SELECT * FROM information WHERE userNumber=#{userNumber}
	</select>

	<!-- 개인정보 업데이트 -->
	<update id="s_infoupdate"
		parameterType="com.spring.project.student.vo.S_informationVO">
		UPDATE users SET userName=#{userName},
		userCellNum=#{userCellNum}, userAddr1=#{userAddr1},
		userAddr2=#{userAddr2} where userNumber=#{userNumber}
	</update>

	<!-- 수강중 강의 -->
	<select id="s_Lecture" parameterType="String"
		resultType="com.spring.project.student.vo.middle_classVO">
		select * from middle_class where userNumber = #{userNumber}
	</select>

	<!-- 수강중 과제 -->
	<select id="s_report" parameterType="String"
		resultType="com.spring.project.student.vo.report_tblVO">
		select
		lectureName
		,REPORTCODE
		,l.LECCODE
		,r.YEAR
		,REPORTINFO
		,REPORTNAME
		,ENDDATE
		,to_number(to_char(ENDDATE - sysdate)) as Progress
		from report_tbl r ,
		lecture l
		where l.lecCode = r.lecCode and lectureName = #{select}
	</select>

	<!-- 과제 내용 -->
	<select id="reportcontent" parameterType="String"
		resultType="com.spring.project.student.vo.report_tblVO">
		select
		lectureName
		,REPORTCODE
		,l.LECCODE
		,r.YEAR
		,REPORTINFO
		,REPORTNAME
		,ENDDATE
		,to_number(to_char(ENDDATE - sysdate)) as Progress
		from report_tbl r ,
		lecture l
		where l.lecCode = r.lecCode and REPORTCODE = #{reportcode}
 	</select>
 	
 	<!--  과제 제출  -->
 	<select id="reportsub" parameterType="String" resultType="com.spring.project.student.vo.Report_subVO">
 		select * from users where userNumber = #{userNumber}
 	</select>
 	
 	<!-- 과제 제출 완료  --> 
 	<insert id="s_fileUpload" parameterType="com.spring.project.student.vo.Report_subVO">
 		insert into report_submit_tbl 
		(REPORTSUBMITCODE
		,REPORTCODE
		,STDNUMBER
		,TITLE
		,FILENAME
		,YEAR)
		values(REPORT_SUBMIT_SEQ.nextval,#{reportcode},#{userNumber},#{userName},#{fileName},sysdate)
 	</insert>

	<!-- 장학글 갯수 -->

	<select id="getArticleCnt" resultType="int">

		SELECT COUNT(*) as cnt FROM SCHOLARSHIP where delstatus != 1
			<if test="year != 0">
				and to_char(year,'yyyy') like #{year}
				<if test="smester != 0">
					and semester like #{smester}
				</if>
			</if>

	</select>

	<!-- 장학글 목록 -->

	<select id="getArticleList" parameterType="java.util.Map"
		resultType="com.spring.project.admin.vo.ScholarpkVO">

		SELECT *
		FROM (select SCHOLARPK,SCHOLARNAME,to_char(YEAR,'YYYY') as
		YEAR,SEMESTER,TO_CHAR(AMOUNT,'999,999,999,999,999') as AMOUNT,ROWNUM rNum
		from (
		select * FROM SCHOLARSHIP
		where delstatus = 0
		order by
		SCHOLARPK desc
		)

		<where>
			<if test="year != 0">
				to_char(year,'yyyy') = #{year}
				<if test="smester != 0">
					and semester like #{smester}
				</if>
			</if>

		</where>
		)
				                 
				                
		<![CDATA[ where rNum >= #{start} and rNum <= #{end}]]>

	</select>

	<!-- 장학금 수혜 내역 갯수 -->

	<select id="management_cnt" resultType="int">

		SELECT count(*) as cnt
		FROM Receiveddetails where stdnumber = #{userNumber} and statcode=1

	</select>

	<!-- 장학금 수혜 내역 목록 -->

	<select id="managementList" parameterType="java.util.Map"
		resultType="com.spring.project.student.vo.DetailsVO">
		select stdnumber,to_char(s_year,'yyyy') as s_year,semester,scholarname,TO_CHAR(AMOUNT,'999,999,999,999,999') as AMOUNT,year,statcode
        from (
        select * FROM Receiveddetails
        where stdnumber =  #{userNumber} and statcode=1
        order by s_year desc
        )
	</select>

	<!-- 장학글 상세 -->
	<select id="getArticle"
		resultType="com.spring.project.admin.vo.ScholarpkVO">

		SELECT * FROM SCHOLARSHIP where scholarpk = #{scholarpk}

	</select>

	<!-- 장학금 중복 신청 검사 -->
	<select id="scholarpk" resultType="int">

		SELECT count(*) FROM
		SCHOLARSHIPINFO where stdNumber = #{userNumber} and
		scholarpk =
		#{scholarpk}

	</select>

	<!-- 장학금 신청 -->
	<insert id="scholarshipinsert" parameterType="java.util.Map">
		insert into
		SCHOLARSHIPINFO(SCHINFOPK,SCHOLARPK,STDNUMBER,STATCODE)
		values(SCHOLARSHIPINFO_SEQ.nextval,#{scholarpk},#{userNumber},0)
	</insert>

	<!-- 내 수강신청 목록 조회 -->
	<select id="studentMyLecture" parameterType="String"
		resultType="com.spring.project.student.vo.LectureVO">
		select * from mylectureview where userNumber =
		#{userNumber}
	</select>

	<delete id="cancelLecture" parameterType="java.util.Map">
		delete from
		studentClassInfo where lecCode = #{lecCode} and
		userNumber=#{userNumber}
	</delete>

	<!-- 강의 목록 조회(전공) -->
	<select id="getMajor"
		resultType="com.spring.project.student.vo.LectureVO">
		select majorName from major where delStatus = 0 group by
		majorName order by
		majorName
	</select>

	<!-- 내 학점 조회 -->
	<select id="GPA"
		resultType="com.spring.project.student.vo.GpaVO">
		select rownum, r.* from(SELECT l.year, g.semester, l.lecCode, l.lectureName, l.grade, 
												l.lectureClassfication, l.lectureScore, g.credit,g.jscore, u.userName
							   	FROM student s, studentClassInfo sc, gpa g, lecture l, users u
								WHERE s.stdNumber = sc.userNumber
						          and u.userNumber = s.stdNumber
							      and sc.lecCode = l.lecCode(+)
							      and sc.infoCode=g.infoCode(+) 
							      and sc.status = 1
							      and s.stdNumber = #{userNumber}
                                  and g.semester is not null
							 order by l.lecCode asc) r
	</select>

	<!-- 신청 학점 -->
	<select id="ApplyCredit" parameterType="String" resultType="int">
		select sum(lectureScore) as ApplyCredit from mylectureview where
		userNumber = #{userNumber}
	</select>
	
	<!-- 이수 학점 -->
	<select id="grantedCredit" resultType="com.spring.project.student.vo.GpaVO">
		SELECT sum(lecturescore) as grantedCredit, count(*) as grantedCnt, sum(g.jscore) as totalJscore
		  from student s, studentClassInfo sc, gpa g, lecture l, users u
		WHERE s.stdNumber = sc.userNumber
		  and u.userNumber = s.stdNumber
		  and sc.lecCode = l.lecCode(+)
		  and sc.infoCode=g.infoCode(+) 
		  and sc.status = 1
		  and s.stdNumber = #{userNumber}
		  and credit != 'F' AND credit is not null
	</select>
</mapper>